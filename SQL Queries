***View Dataset***
SELECT * FROM IMDBTop250MoviesCleanedversionIMDBTop250Movies;

***Change Table Name***
ALTER TABLE IMDBTop250MoviesCleanedversionIMDBTop250Movies RENAME TO Movies
             
SELECT * FROM Movies;

***Top 5 Movies Budgeted Movies***
SELECT name, budget
FROM Movies
ORDER BY budget DESC
LIMIT 5

â€˜Through research we can see the actual budget for the top movie Princess Mononoke is actually recorded in Japanese Yen, Not in USD. This will need to be fixed to be equivalent to USD which converts $23,500,000.
Likewise, 3 Idiots is also a foreign film. After conversion to USD, it is actually just under 6.7 million.
No other adjustments are necessary for the remaining movies.'

***Princess Mononoke Update***
UPDATE Movies
SET budget = REPLACE(budget, 2400000000, 23500000)

***3 Idiots Update***
UPDATE Movies 
SET budget = REPLACE(budget, 550000000, 6700000)

***Updated Top 5 Budgeted Movies***
SELECT name, budget
FROM Movies
ORDER BY budget DESC
LIMIT 5


***Top 5 Rated Movies***
SELECT name,rating
FROM Movies
ORDER BY rating DESC
LIMIT 5

***Top 5 Box Office Hits***
SELECT name, box_office
FROM Movies
GROUP BY name
ORDER BY box_office DESC
LIMIT 5

***Top 10 Highest Profits***
SELECT name, budget, box_office, (box_office - budget) AS profit
FROM Movies
ORDER BY profit DESC
LIMIT 10

 ***Most Popular Genres***
SELECT genre, COUNT(*) AS genre_count
FROM (
  SELECT TRIM(value) AS genre
  FROM Movies
  CROSS JOIN json_each('["' || REPLACE(genre, ',', '","') || '"]')
)
GROUP BY genre
ORDER BY genre_count DESC
LIMIT 5

***Top 10 directors***
SELECT directors, COUNT(*) AS Number_of_movies
FROM Movies
GROUP bY directors
ORDER BY COUNT(*) DESC
LIMIT 10

***Movies by Rating***
SELECT certificate, count(*) AS total
FROM Movies
GROUP BY certificate
ORDER BY total DESC

***Best Years for Movies***
SELECT year, COUNT(year) as Number_of_Movies_Per_Year
FROM Movies
GROUP BY year
ORDER By COUNT(year) DESC
LIMIT 10

***Movies by Decade***
SELECT
    year/10 * 10 + 1 AS decade_start,
    year/10 * 10 + 10 AS decade_end,
    COUNT(year) as number_of_movies
FROM Movies
GROUP BY year/10
ORDER BY decade_start

**For visualization purposes, combine the decade start and end into one column using the concat function.**

SELECT 
   decade_start || ' - ' || decade_end as decade,
   COUNT(year) as number_of_movies
FROM (
  SELECT
     (year/10) * 10 + 1 as decade_start,
     (year/10) * 10 + 10 as decade_end,
     year
  FROM Movies
) as subquery
GROUP BY decade_start
ORDER BY decade_start

***Most Popular Genre by Decade***
WITH genre_counts AS (
  SELECT genre, COUNT(*) AS genre_count, year
  FROM (
    SELECT TRIM(value) AS genre, year
    FROM Movies
    CROSS JOIN json_each('["' || REPLACE (genre, ',', '","') || '"]')
  )
  GROUP BY genre, year
), decade_max_genre AS (
  SELECT d.decade_start, d.decade_end, gc.genre,
         ROW_NUMBER() OVER (PARTITION BY d.decade_start ORDER BY gc.genre_count DESC) AS rn
  FROM (
    SELECT
      year/10 * 10 + 1 AS decade_start,
      year/10 * 10 + 10 AS decade_end
    FROM Movies
    GROUP BY year/10
  ) d
  JOIN genre_counts gc ON gc.year >= d.decade_start AND gc.year <= d.decade_end
)
SELECT decade_start, decade_end, genre
FROM decade_max_genre
WHERE rn = 1
ORDER BY decade_start
   
**For visualization purposes, combine the decade start and end into one column using the concat function.**

WITH genre_counts AS (
  SELECT genre, COUNT(*) AS genre_count, year
  FROM (
    SELECT TRIM(value) AS genre, year
    FROM Movies
    CROSS JOIN json_each('["' || REPLACE(genre, ',', '","') || '"]')
  )
  GROUP BY genre, year
), decade_max_genre AS (
  SELECT 
    d.decade_start || ' - ' || d.decade_end AS decade,
    gc.genre,
    ROW_NUMBER() OVER (PARTITION BY d.decade_start ORDER BY gc.genre_count DESC) AS rn
  FROM (
    SELECT 
      (year/10) * 10 + 1 AS decade_start,
      (year/10) * 10 + 10 AS decade_end
    FROM Movies
    GROUP BY year/10
  ) d
  JOIN genre_counts gc ON gc.year >= d.decade_start AND gc.year <= d.decade_end
)
SELECT decade, genre
FROM decade_max_genre
WHERE rn = 1
ORDER BY decade


